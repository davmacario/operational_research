{"filter":false,"title":"lab02_graph_coloring.mos","tooltip":"/lab02_graph_coloring.mos","undoManager":{"mark":4,"position":4,"stack":[[{"start":{"row":0,"column":0},"end":{"row":14,"column":0},"action":"remove","lines":["model ModelName","  options noimplicit","  uses \"mmxprs\"","  ! uses \"mminsight\" ! uncomment this line for an Xpress Insight model","","  declarations","    ! ...","    Objective:linctr","  end-declarations","","  writeln(\"Begin running model\")","  !...","  writeln(\"End running model\")","end-model",""],"id":2},{"start":{"row":0,"column":0},"end":{"row":90,"column":9},"action":"insert","lines":["!@encoding CP1252","model MatchingModel","uses \"mmxprs\"; !gain access to the Xpress-Optimizer solver","","!sample declarations section","declarations","\tLeftNodes = 1..16","\tRightNodes = 1..16","","\tp: real","\trandn: real","\tcount_existent: integer","\ttotal_cardinality: integer","","\tx_ij: array(LeftNodes, RightNodes) of real","\t! z_ij: array(LeftNodes, RightNodes) of integer","","\ty_ij: array(LeftNodes, RightNodes) of mpvar","","end-declarations","","! Initialize probability of edge:","p := 0.3","!p := 0.6","","! Initialize randomly the parameters (x_ij)","setrandseed(6)","","count_existent := 0","","forall(i in LeftNodes, j in RightNodes) do","\trandn := random","\twriteln(\"Current randn: \", randn)","","\t! The value of randn is used to decide whether to keep the edge or not","\t! Since it is uniform in [0,1], it will have value below p equal to p","\tif randn <= p","\tthen","\tx_ij(i,j) := 10*random","\tcount_existent := count_existent + 1","\t! No need for \"else edge=0\" since 0 is the default value for x","\tend-if","end-do","","writeln(\"Number of nonzero weights: \", count_existent)","","! Print the weight values (very messy):","!forall (i in LeftNodes, j in RightNodes) do","!\twrite(x_ij(i,j), \" \")","!\tif j = 16","!\tthen writeln(\"\")","!\tend-if","!end-do","","! Define OBJECTIVE FUNCTIONS","TotCardinality := sum(i in LeftNodes, j in RightNodes) y_ij(i,j)","TotalWeight := sum(i in LeftNodes, j in RightNodes) x_ij(i,j)*y_ij(i,j)","","! Define CONSTRAINTS","forall(i in LeftNodes) sum(j in RightNodes) y_ij(i,j) <= 1","forall(j in RightNodes) sum(i in LeftNodes) y_ij(i,j) <= 1","forall(i in LeftNodes, j in RightNodes) y_ij(i,j) <= x_ij(i,j)","","! Initialization of variables","forall(i in LeftNodes, j in RightNodes) y_ij(i,j) is_binary","","! Optimization statement","!maximize(TotCardinality)","maximize(TotalWeight)","","total_cardinality := 0","","writeln(\"Optimal value: \", getobjval)","","forall(i in LeftNodes) do","\tforall(j in RightNodes) do","\t\twrite(getsol(y_ij(i,j)))","\t\tif getsol(y_ij(i,j)) = 1","\t\tthen total_cardinality := total_cardinality + 1","\t\tend-if","\tend-do","\twriteln(\"\")","end-do","","fopen('out_lab01.txt', F_OUTPUT+F_APPEND)","writeln(getobjval,\",\",total_cardinality)","fclose(F_OUTPUT+F_APPEND)","","writeln(\"Cardinality: \", total_cardinality)","","end-model"]}],[{"start":{"row":21,"column":0},"end":{"row":89,"column":0},"action":"remove","lines":["! Initialize probability of edge:","p := 0.3","!p := 0.6","","! Initialize randomly the parameters (x_ij)","setrandseed(6)","","count_existent := 0","","forall(i in LeftNodes, j in RightNodes) do","\trandn := random","\twriteln(\"Current randn: \", randn)","","\t! The value of randn is used to decide whether to keep the edge or not","\t! Since it is uniform in [0,1], it will have value below p equal to p","\tif randn <= p","\tthen","\tx_ij(i,j) := 10*random","\tcount_existent := count_existent + 1","\t! No need for \"else edge=0\" since 0 is the default value for x","\tend-if","end-do","","writeln(\"Number of nonzero weights: \", count_existent)","","! Print the weight values (very messy):","!forall (i in LeftNodes, j in RightNodes) do","!\twrite(x_ij(i,j), \" \")","!\tif j = 16","!\tthen writeln(\"\")","!\tend-if","!end-do","","! Define OBJECTIVE FUNCTIONS","TotCardinality := sum(i in LeftNodes, j in RightNodes) y_ij(i,j)","TotalWeight := sum(i in LeftNodes, j in RightNodes) x_ij(i,j)*y_ij(i,j)","","! Define CONSTRAINTS","forall(i in LeftNodes) sum(j in RightNodes) y_ij(i,j) <= 1","forall(j in RightNodes) sum(i in LeftNodes) y_ij(i,j) <= 1","forall(i in LeftNodes, j in RightNodes) y_ij(i,j) <= x_ij(i,j)","","! Initialization of variables","forall(i in LeftNodes, j in RightNodes) y_ij(i,j) is_binary","","! Optimization statement","!maximize(TotCardinality)","maximize(TotalWeight)","","total_cardinality := 0","","writeln(\"Optimal value: \", getobjval)","","forall(i in LeftNodes) do","\tforall(j in RightNodes) do","\t\twrite(getsol(y_ij(i,j)))","\t\tif getsol(y_ij(i,j)) = 1","\t\tthen total_cardinality := total_cardinality + 1","\t\tend-if","\tend-do","\twriteln(\"\")","end-do","","fopen('out_lab01.txt', F_OUTPUT+F_APPEND)","writeln(getobjval,\",\",total_cardinality)","fclose(F_OUTPUT+F_APPEND)","","writeln(\"Cardinality: \", total_cardinality)",""],"id":3}],[{"start":{"row":6,"column":1},"end":{"row":17,"column":44},"action":"remove","lines":["LeftNodes = 1..16","\tRightNodes = 1..16","","\tp: real","\trandn: real","\tcount_existent: integer","\ttotal_cardinality: integer","","\tx_ij: array(LeftNodes, RightNodes) of real","\t! z_ij: array(LeftNodes, RightNodes) of integer","","\ty_ij: array(LeftNodes, RightNodes) of mpvar"],"id":4}],[{"start":{"row":6,"column":1},"end":{"row":7,"column":0},"action":"remove","lines":["",""],"id":5}],[{"start":{"row":6,"column":0},"end":{"row":6,"column":1},"action":"remove","lines":["\t"],"id":6}]]},"ace":{"folds":[],"scrolltop":0,"scrollleft":0,"selection":{"start":{"row":6,"column":0},"end":{"row":6,"column":0},"isBackwards":false},"options":{"guessTabSize":true,"useWrapMode":false,"wrapToView":true},"firstLineState":0},"timestamp":1679666733553,"hash":"d6eb85a487f4ad3879ed955065148cbabd3976ca"}